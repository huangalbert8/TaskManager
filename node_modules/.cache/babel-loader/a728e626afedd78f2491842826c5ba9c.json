{"ast":null,"code":"var _jsxFileName = \"/Users/alberthuang/Desktop/task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\n// is not html but jsx(javascript extension)\nimport Header from \"./components/Header\";\nimport AddTask from \"./components/AddTask\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Tasks from \"./components/Tasks\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport CompletedTasks from \"./components/CompletedTasks\";\nimport { Link } from \"react-router-dom\";\nimport Projects from \"./components/Projects\";\nimport Drag from \"./components/Drag\";\nimport { Draggable } from \"react-draggable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [showShortTasks, setShowShortTasks] = useState(false);\n  const [showLongTasks, setShowLongTasks] = useState(false);\n  const [showAppointments, setShowAppointments] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      const projectsFromServer = await fetchProjects();\n      setTasks(tasksFromServer);\n      setProjects(projectsFromServer);\n    };\n\n    getTasks();\n  }, []); // dependancy array\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:7000/tasks\");\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:7000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchProjects = async () => {\n    const res = await fetch(\"http://localhost:7000/projects\");\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchProject = async id => {\n    const res = await fetch(`http://localhost:7000/projects/${id}`);\n    const data = await res.json();\n    return data;\n  }; // const addTask = (task) => {\n  //   const id = Math.floor(Math.random() * 10000) + 1;\n  //   console.log(id);\n  //   const newTask = { id, ...task }; // ...task return the text, day, and reminder of the task passed as arg\n  //   setTasks([...tasks, newTask]); // sets tasks to an array with old tasks and new task\n  // };\n\n\n  const addTask = async task => {\n    task.completion = \"in progress\";\n\n    if (task.type === \"project\") {\n      const res = await fetch(\"http://localhost:7000/projects\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(task)\n      });\n      const data = await res.json();\n      setProjects([...projects, data]);\n    } else {\n      const res = await fetch(\"http://localhost:7000/tasks\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(task)\n      });\n      const data = await res.json();\n      setTasks([...tasks, data]); // sets tasks to an array with old tasks and new task\n    }\n  };\n\n  const deleteTaskPerm = async id => {\n    await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"DELETE\"\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const deleteTask = async id => {\n    const taskToDelete = await fetchTask(id);\n    const updTask = { ...taskToDelete,\n      completion: \"deleted\"\n    };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      completion: data.completion\n    } : task));\n  };\n\n  const deleteProject = async id => {\n    const projectToDelete = await fetchTask(id);\n    const updTask = { ...projectToDelete,\n      completion: \"deleted\"\n    };\n    const res = await fetch(`http://localhost:7000/projects/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setProjects(projects.map(project => project.id === id ? { ...project,\n      completion: data.completion\n    } : project));\n  };\n\n  const completeTask = async id => {\n    const taskToDelete = await fetchTask(id);\n    const updProject = { ...taskToDelete,\n      completion: \"completed\"\n    };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updProject)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      completion: data.completion\n    } : task));\n  }; //Reminder\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  const toggleShow = async id => {\n    const projectToShow = await fetchProject(id);\n    const updProject = { ...projectToShow,\n      show: !projectToShow.show\n    };\n    const res = await fetch(`http://localhost:7000/projects/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updProject)\n    });\n    const data = await res.json();\n    setProjects(projects.map(project => project.id === id ? { ...project,\n      show: data.show\n    } : project));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Draggable, {\n      axis: \"x\",\n      handle: \".handle\",\n      defaultPosition: {\n        x: 0,\n        y: 0\n      },\n      position: null,\n      grid: [25, 25],\n      scale: 1,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this) // <Router>\n  //   <div className=\"container\">\n  //     <Header\n  //       onAdd={() => setShowAddTask(!showAddTask)}\n  //       showAdd={showAddTask}\n  //     />\n  //     {/* {tasks.length > 0 ? (\n  //     <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />\n  //   ) : (\n  //     \"No Tasks\"\n  //   )} */}\n  //     <Route\n  //       path=\"/\"\n  //       exact\n  //       render={(props) => (\n  //         <>\n  //           {showAddTask && <AddTask onAdd={addTask} />}\n  //           <Tasks\n  //             tasks={tasks}\n  //             onDelete={deleteTask}\n  //             onToggle={toggleReminder}\n  //             onShow={() => setShowShortTasks(!showShortTasks)}\n  //             showShort={showShortTasks}\n  //             onComplete={completeTask}\n  //             type={\"short\"}\n  //           />\n  //           <Tasks\n  //             tasks={tasks}\n  //             onDelete={deleteTask}\n  //             onToggle={toggleReminder}\n  //             onShow={() => setShowLongTasks(!showLongTasks)}\n  //             showShort={showLongTasks}\n  //             onComplete={completeTask}\n  //             type={\"long\"}\n  //           />\n  //           <Tasks\n  //             tasks={tasks}\n  //             onDelete={deleteTask}\n  //             onToggle={toggleReminder}\n  //             onShow={() => setShowAppointments(!showAppointments)}\n  //             showShort={showAppointments}\n  //             onComplete={completeTask}\n  //             type={\"appointment\"}\n  //           />\n  //           <Projects\n  //             projects={projects}\n  //             tasks={tasks}\n  //             onDelete={deleteTask}\n  //             onToggle={toggleReminder}\n  //             onShow={toggleShow}\n  //             onComplete={completeTask}\n  //             onAdd={addTask}\n  //             deleteProject={deleteProject}\n  //           ></Projects>\n  //           <div style={{ textAlign: \"center\" }}>\n  //             <Link to=\"/completedTasks\" className=\"button\">\n  //               View Completed Tasks\n  //             </Link>\n  //           </div>\n  //         </>\n  //       )}\n  //     />\n  //     <Route path=\"/completedTasks\">\n  //       <CompletedTasks tasks={tasks} onDelete={deleteTaskPerm} />\n  //     </Route>\n  //   </div>\n  // </Router>\n  ;\n};\n\n_s(App, \"dQzsbSxq28aRdFN6FIIGrukHX+g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alberthuang/Desktop/task-tracker/src/App.js"],"names":["Header","AddTask","React","useState","useEffect","Tasks","BrowserRouter","Router","Route","CompletedTasks","Link","Projects","Drag","Draggable","App","showAddTask","setShowAddTask","showShortTasks","setShowShortTasks","showLongTasks","setShowLongTasks","showAppointments","setShowAppointments","tasks","setTasks","projects","setProjects","getTasks","tasksFromServer","fetchTasks","projectsFromServer","fetchProjects","res","fetch","data","json","fetchTask","id","fetchProject","addTask","task","completion","type","method","headers","body","JSON","stringify","deleteTaskPerm","filter","deleteTask","taskToDelete","updTask","map","deleteProject","projectToDelete","project","completeTask","updProject","toggleReminder","taskToToggle","reminder","toggleShow","projectToShow","show","x","y"],"mappings":"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","sourcesContent":["// is not html but jsx(javascript extension)\nimport Header from \"./components/Header\";\nimport AddTask from \"./components/AddTask\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Tasks from \"./components/Tasks\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport CompletedTasks from \"./components/CompletedTasks\";\nimport { Link } from \"react-router-dom\";\nimport Projects from \"./components/Projects\";\nimport Drag from \"./components/Drag\";\nimport { Draggable } from \"react-draggable\";\n\nconst App = () => {\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [showShortTasks, setShowShortTasks] = useState(false);\n  const [showLongTasks, setShowLongTasks] = useState(false);\n  const [showAppointments, setShowAppointments] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      const projectsFromServer = await fetchProjects();\n      setTasks(tasksFromServer);\n      setProjects(projectsFromServer);\n    };\n    getTasks();\n  }, []); // dependancy array\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:7000/tasks\");\n    const data = await res.json();\n    return data;\n  };\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:7000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchProjects = async () => {\n    const res = await fetch(\"http://localhost:7000/projects\");\n    const data = await res.json();\n    return data;\n  };\n  const fetchProject = async (id) => {\n    const res = await fetch(`http://localhost:7000/projects/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  // const addTask = (task) => {\n  //   const id = Math.floor(Math.random() * 10000) + 1;\n  //   console.log(id);\n  //   const newTask = { id, ...task }; // ...task return the text, day, and reminder of the task passed as arg\n  //   setTasks([...tasks, newTask]); // sets tasks to an array with old tasks and new task\n  // };\n\n  const addTask = async (task) => {\n    task.completion = \"in progress\";\n    if (task.type === \"project\") {\n      const res = await fetch(\"http://localhost:7000/projects\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(task),\n      });\n      const data = await res.json();\n      setProjects([...projects, data]);\n    } else {\n      const res = await fetch(\"http://localhost:7000/tasks\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(task),\n      });\n      const data = await res.json();\n      setTasks([...tasks, data]); // sets tasks to an array with old tasks and new task\n    }\n  };\n\n  const deleteTaskPerm = async (id) => {\n    await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"DELETE\",\n    });\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const deleteTask = async (id) => {\n    const taskToDelete = await fetchTask(id);\n    const updTask = { ...taskToDelete, completion: \"deleted\" };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completion: data.completion } : task\n      )\n    );\n  };\n  const deleteProject = async (id) => {\n    const projectToDelete = await fetchTask(id);\n    const updTask = { ...projectToDelete, completion: \"deleted\" };\n    const res = await fetch(`http://localhost:7000/projects/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n    const data = await res.json();\n\n    setProjects(\n      projects.map((project) =>\n        project.id === id\n          ? { ...project, completion: data.completion }\n          : project\n      )\n    );\n  };\n  const completeTask = async (id) => {\n    const taskToDelete = await fetchTask(id);\n    const updProject = { ...taskToDelete, completion: \"completed\" };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updProject),\n    });\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completion: data.completion } : task\n      )\n    );\n  };\n\n  //Reminder\n\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: data.reminder } : task\n      )\n    );\n  };\n\n  const toggleShow = async (id) => {\n    const projectToShow = await fetchProject(id);\n    const updProject = { ...projectToShow, show: !projectToShow.show };\n    const res = await fetch(`http://localhost:7000/projects/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updProject),\n    });\n    const data = await res.json();\n\n    setProjects(\n      projects.map((project) =>\n        project.id === id ? { ...project, show: data.show } : project\n      )\n    );\n  };\n  return (\n    <div>\n      <Draggable\n        axis=\"x\"\n        handle=\".handle\"\n        defaultPosition={{ x: 0, y: 0 }}\n        position={null}\n        grid={[25, 25]}\n        scale={1}\n      >\n        <div>hello</div>\n      </Draggable>\n    </div>\n    // <Router>\n    //   <div className=\"container\">\n    //     <Header\n    //       onAdd={() => setShowAddTask(!showAddTask)}\n    //       showAdd={showAddTask}\n    //     />\n    //     {/* {tasks.length > 0 ? (\n    //     <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />\n    //   ) : (\n    //     \"No Tasks\"\n    //   )} */}\n    //     <Route\n    //       path=\"/\"\n    //       exact\n    //       render={(props) => (\n    //         <>\n    //           {showAddTask && <AddTask onAdd={addTask} />}\n    //           <Tasks\n    //             tasks={tasks}\n    //             onDelete={deleteTask}\n    //             onToggle={toggleReminder}\n    //             onShow={() => setShowShortTasks(!showShortTasks)}\n    //             showShort={showShortTasks}\n    //             onComplete={completeTask}\n    //             type={\"short\"}\n    //           />\n    //           <Tasks\n    //             tasks={tasks}\n    //             onDelete={deleteTask}\n    //             onToggle={toggleReminder}\n    //             onShow={() => setShowLongTasks(!showLongTasks)}\n    //             showShort={showLongTasks}\n    //             onComplete={completeTask}\n    //             type={\"long\"}\n    //           />\n    //           <Tasks\n    //             tasks={tasks}\n    //             onDelete={deleteTask}\n    //             onToggle={toggleReminder}\n    //             onShow={() => setShowAppointments(!showAppointments)}\n    //             showShort={showAppointments}\n    //             onComplete={completeTask}\n    //             type={\"appointment\"}\n    //           />\n    //           <Projects\n    //             projects={projects}\n    //             tasks={tasks}\n    //             onDelete={deleteTask}\n    //             onToggle={toggleReminder}\n    //             onShow={toggleShow}\n    //             onComplete={completeTask}\n    //             onAdd={addTask}\n    //             deleteProject={deleteProject}\n    //           ></Projects>\n    //           <div style={{ textAlign: \"center\" }}>\n    //             <Link to=\"/completedTasks\" className=\"button\">\n    //               View Completed Tasks\n    //             </Link>\n    //           </div>\n    //         </>\n    //       )}\n    //     />\n\n    //     <Route path=\"/completedTasks\">\n    //       <CompletedTasks tasks={tasks} onDelete={deleteTaskPerm} />\n    //     </Route>\n    //   </div>\n    // </Router>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}