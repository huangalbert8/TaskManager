{"ast":null,"code":"var _jsxFileName = \"/Users/alberthuang/Desktop/task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\n// is not html but jsx(javascript extension)\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport AddTask from \"./components/AddTask\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); // dependancy array\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:6000/tasks\");\n    const data = await res.json();\n    return data;\n  }; // const addTask = (task) => {\n  //   const id = Math.floor(Math.random() * 10000) + 1;\n  //   console.log(id);\n  //   const newTask = { id, ...task }; // ...task return the text, day, and reminder of the task passed as arg\n  //   setTasks([...tasks, newTask]); // sets tasks to an array with old tasks and new task\n  // };\n\n\n  const addTask = async task => {\n    const res = await fetch(\"http://localhost:6000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]); // sets tasks to an array with old tasks and new task\n  };\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Reminder\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : \"No Tasks\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alberthuang/Desktop/task-tracker/src/App.js"],"names":["Header","Tasks","AddTask","React","useState","useEffect","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","addTask","task","method","headers","body","JSON","stringify","deleteTask","id","filter","toggleReminder","map","reminder","length"],"mappings":";;;AAAA;AACA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,QAAQ,GAAG,YAAY;AAC3B,YAAMC,eAAe,GAAG,MAAMC,UAAU,EAAxC;AACAH,MAAAA,QAAQ,CAACE,eAAD,CAAR;AACD,KAHD;;AAIAD,IAAAA,QAAQ;AACT,GANQ,EAMN,EANM,CAAT,CAHgB,CASR;;AAER,QAAME,UAAU,GAAG,YAAY;AAC7B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD,CAXgB,CAiBhB;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAME,OAAO,GAAG,MAAOC,IAAP,IAAgB;AAC9B,UAAML,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AACrDK,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF4C;AAKrDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AAL+C,KAAhC,CAAvB;AAOA,UAAMH,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWO,IAAX,CAAD,CAAR,CAT8B,CASF;AAC7B,GAVD;;AAYA,QAAMS,UAAU,GAAIC,EAAD,IAAQ;AACzBhB,IAAAA,QAAQ,CAACD,KAAK,CAACkB,MAAN,CAAcR,IAAD,IAAUA,IAAI,CAACO,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAFD,CApCgB,CAwChB;;;AAEA,QAAME,cAAc,GAAIF,EAAD,IAAQ;AAC7BhB,IAAAA,QAAQ,CACND,KAAK,CAACoB,GAAN,CAAWV,IAAD,IACRA,IAAI,CAACO,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGP,IAAL;AAAWW,MAAAA,QAAQ,EAAE,CAACX,IAAI,CAACW;AAA3B,KAAjB,GAAyDX,IAD3D,CADM,CAAR;AAKD,GAND;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,KAAK,EAAE,MAAMX,cAAc,CAAC,CAACD,WAAF,CAD7B;AAEE,MAAA,OAAO,EAAEA;AAFX;AAAA;AAAA;AAAA;AAAA,YADF,EAKGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEW;AAAhB;AAAA;AAAA;AAAA;AAAA,YALlB,EAMGT,KAAK,CAACsB,MAAN,GAAe,CAAf,gBACC,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEtB,KAAd;AAAqB,MAAA,QAAQ,EAAEgB,UAA/B;AAA2C,MAAA,QAAQ,EAAEG;AAArD;AAAA;AAAA;AAAA;AAAA,YADD,GAGC,UATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA/DD;;GAAMtB,G;;KAAAA,G;AAiEN,eAAeA,GAAf","sourcesContent":["// is not html but jsx(javascript extension)\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport AddTask from \"./components/AddTask\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n    getTasks();\n  }, []); // dependancy array\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:6000/tasks\");\n    const data = await res.json();\n    return data;\n  };\n\n  // const addTask = (task) => {\n  //   const id = Math.floor(Math.random() * 10000) + 1;\n  //   console.log(id);\n  //   const newTask = { id, ...task }; // ...task return the text, day, and reminder of the task passed as arg\n  //   setTasks([...tasks, newTask]); // sets tasks to an array with old tasks and new task\n  // };\n\n  const addTask = async (task) => {\n    const res = await fetch(\"http://localhost:6000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(task),\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]); // sets tasks to an array with old tasks and new task\n  };\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  //Reminder\n\n  const toggleReminder = (id) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: !task.reminder } : task\n      )\n    );\n  };\n  return (\n    <div className=\"container\">\n      <Header\n        onAdd={() => setShowAddTask(!showAddTask)}\n        showAdd={showAddTask}\n      />\n      {showAddTask && <AddTask onAdd={addTask} />}\n      {tasks.length > 0 ? (\n        <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />\n      ) : (\n        \"No Tasks\"\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}