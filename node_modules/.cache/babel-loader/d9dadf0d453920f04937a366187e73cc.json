{"ast":null,"code":"var _jsxFileName = \"/Users/alberthuang/Desktop/task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\n// is not html but jsx(javascript extension)\nimport Header from \"./components/Header\";\nimport AddTask from \"./components/AddTask\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Tasks from \"./components/Tasks\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport CompletedTasks from \"./components/CompletedTasks\";\nimport { Link } from \"react-router-dom\";\nimport Projects from \"./components/Projects\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [showShortTasks, setShowShortTasks] = useState(false);\n  const [showLongTasks, setShowLongTasks] = useState(false);\n  const [showAppointments, setShowAppointments] = useState(false);\n  const [showCompletedTasks, setShowCompletedTasks] = useState(false);\n  const [showCompletedProjects, setShowCompletedProjects] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      const projectsFromServer = await fetchProjects();\n      setTasks(tasksFromServer);\n      setProjects(projectsFromServer);\n    };\n\n    getTasks();\n  }, []); // dependancy array\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:7000/tasks\");\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:7000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchProjects = async () => {\n    const res = await fetch(\"http://localhost:7000/projects\");\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchProject = async id => {\n    const res = await fetch(`http://localhost:7000/projects/${id}`);\n    const data = await res.json();\n    return data;\n  }; // const addTask = (task) => {\n  //   const id = Math.floor(Math.random() * 10000) + 1;\n  //   console.log(id);\n  //   const newTask = { id, ...task }; // ...task return the text, day, and reminder of the task passed as arg\n  //   setTasks([...tasks, newTask]); // sets tasks to an array with old tasks and new task\n  // };\n\n\n  const addTask = async task => {\n    task.completion = \"in progress\";\n\n    if (task.type === \"project\") {\n      const res = await fetch(\"http://localhost:7000/projects\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(task)\n      });\n      const data = await res.json();\n      setProjects([...projects, data]);\n    } else {\n      const res = await fetch(\"http://localhost:7000/tasks\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(task)\n      });\n      const data = await res.json();\n      setTasks([...tasks, data]); // sets tasks to an array with old tasks and new task\n    }\n  };\n\n  const deleteTaskPerm = async id => {\n    await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"DELETE\"\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const deleteTask = async id => {\n    const taskToDelete = await fetchTask(id);\n    const updTask = { ...taskToDelete,\n      completion: \"deleted\"\n    };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      completion: data.completion\n    } : task));\n  };\n\n  const deleteProject = async id => {\n    const projectToDelete = await fetchProject(id);\n    const updTask = { ...projectToDelete,\n      completion: \"deleted\"\n    };\n    const res = await fetch(`http://localhost:7000/projects/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setProjects(projects.map(project => project.id === id ? { ...project,\n      completion: data.completion\n    } : project));\n  };\n\n  const deleteProjectPerm = async id => {\n    const type = await fetchProject(id);\n    console.log(type);\n    await fetch(`http://localhost:7000/projects/${id}`, {\n      method: \"DELETE\"\n    });\n    setProjects(projects.filter(project => project.id !== id));\n\n    for (let i = 0; i < tasks.length; i++) {\n      if (type === tasks[i].type) deleteTaskPerm(tasks[i].id);\n    }\n  };\n\n  const completeTask = async id => {\n    const taskToDelete = await fetchTask(id);\n    const updProject = { ...taskToDelete,\n      completion: \"completed\"\n    };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updProject)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      completion: data.completion\n    } : task));\n  }; //Reminder\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  const toggleShow = async id => {\n    const projectToShow = await fetchProject(id);\n    const updProject = { ...projectToShow,\n      show: !projectToShow.show\n    };\n    const res = await fetch(`http://localhost:7000/projects/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updProject)\n    });\n    const data = await res.json();\n    setProjects(projects.map(project => project.id === id ? { ...project,\n      show: data.show\n    } : project));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n            onAdd: addTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n            tasks: tasks,\n            onDelete: deleteTask,\n            onToggle: toggleReminder,\n            onShow: () => setShowShortTasks(!showShortTasks),\n            showShort: showShortTasks,\n            onComplete: completeTask,\n            type: \"short\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n            tasks: tasks,\n            onDelete: deleteTask,\n            onToggle: toggleReminder,\n            onShow: () => setShowLongTasks(!showLongTasks),\n            showShort: showLongTasks,\n            onComplete: completeTask,\n            type: \"long\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n            tasks: tasks,\n            onDelete: deleteTask,\n            onToggle: toggleReminder,\n            onShow: () => setShowAppointments(!showAppointments),\n            showShort: showAppointments,\n            onComplete: completeTask,\n            type: \"appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Projects, {\n            projects: projects,\n            tasks: tasks,\n            onDelete: deleteTask,\n            onToggle: toggleReminder,\n            onShow: toggleShow,\n            onComplete: completeTask,\n            onAdd: addTask,\n            deleteProject: deleteProject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"center\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/completedTasks\",\n              className: \"button\",\n              children: \"View Completed Tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/completedTasks\",\n        children: /*#__PURE__*/_jsxDEV(CompletedTasks, {\n          tasks: tasks,\n          onDelete: deleteTaskPerm,\n          showTasks: showCompletedTasks,\n          onShowTasks: () => setShowCompletedTasks(!showCompletedTasks),\n          projects: projects,\n          showProjects: showCompletedProjects,\n          onShowProjects: () => setShowCompletedProjects(!showCompletedProjects),\n          onShowProject: toggleShow,\n          deleteProject: deleteProjectPerm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"/cMFau6C8IQavWyvnPrNPW6LL/Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alberthuang/Desktop/task-tracker/src/App.js"],"names":["Header","AddTask","React","useState","useEffect","Tasks","BrowserRouter","Router","Route","CompletedTasks","Link","Projects","App","showAddTask","setShowAddTask","showShortTasks","setShowShortTasks","showLongTasks","setShowLongTasks","showAppointments","setShowAppointments","showCompletedTasks","setShowCompletedTasks","showCompletedProjects","setShowCompletedProjects","tasks","setTasks","projects","setProjects","getTasks","tasksFromServer","fetchTasks","projectsFromServer","fetchProjects","res","fetch","data","json","fetchTask","id","fetchProject","addTask","task","completion","type","method","headers","body","JSON","stringify","deleteTaskPerm","filter","deleteTask","taskToDelete","updTask","map","deleteProject","projectToDelete","project","deleteProjectPerm","console","log","i","length","completeTask","updProject","toggleReminder","taskToToggle","reminder","toggleShow","projectToShow","show","props","textAlign"],"mappings":"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","sourcesContent":["// is not html but jsx(javascript extension)\nimport Header from \"./components/Header\";\nimport AddTask from \"./components/AddTask\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Tasks from \"./components/Tasks\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport CompletedTasks from \"./components/CompletedTasks\";\nimport { Link } from \"react-router-dom\";\nimport Projects from \"./components/Projects\";\n\nconst App = () => {\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [showShortTasks, setShowShortTasks] = useState(false);\n  const [showLongTasks, setShowLongTasks] = useState(false);\n  const [showAppointments, setShowAppointments] = useState(false);\n  const [showCompletedTasks, setShowCompletedTasks] = useState(false);\n  const [showCompletedProjects, setShowCompletedProjects] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      const projectsFromServer = await fetchProjects();\n      setTasks(tasksFromServer);\n      setProjects(projectsFromServer);\n    };\n    getTasks();\n  }, []); // dependancy array\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:7000/tasks\");\n    const data = await res.json();\n    return data;\n  };\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:7000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchProjects = async () => {\n    const res = await fetch(\"http://localhost:7000/projects\");\n    const data = await res.json();\n    return data;\n  };\n  const fetchProject = async (id) => {\n    const res = await fetch(`http://localhost:7000/projects/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  // const addTask = (task) => {\n  //   const id = Math.floor(Math.random() * 10000) + 1;\n  //   console.log(id);\n  //   const newTask = { id, ...task }; // ...task return the text, day, and reminder of the task passed as arg\n  //   setTasks([...tasks, newTask]); // sets tasks to an array with old tasks and new task\n  // };\n\n  const addTask = async (task) => {\n    task.completion = \"in progress\";\n    if (task.type === \"project\") {\n      const res = await fetch(\"http://localhost:7000/projects\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(task),\n      });\n      const data = await res.json();\n      setProjects([...projects, data]);\n    } else {\n      const res = await fetch(\"http://localhost:7000/tasks\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(task),\n      });\n      const data = await res.json();\n      setTasks([...tasks, data]); // sets tasks to an array with old tasks and new task\n    }\n  };\n\n  const deleteTaskPerm = async (id) => {\n    await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"DELETE\",\n    });\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const deleteTask = async (id) => {\n    const taskToDelete = await fetchTask(id);\n    const updTask = { ...taskToDelete, completion: \"deleted\" };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completion: data.completion } : task\n      )\n    );\n  };\n  const deleteProject = async (id) => {\n    const projectToDelete = await fetchProject(id);\n    const updTask = { ...projectToDelete, completion: \"deleted\" };\n    const res = await fetch(`http://localhost:7000/projects/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n    const data = await res.json();\n\n    setProjects(\n      projects.map((project) =>\n        project.id === id\n          ? { ...project, completion: data.completion }\n          : project\n      )\n    );\n  };\n\n  const deleteProjectPerm = async (id) => {\n    const type = await fetchProject(id);\n    console.log(type);\n    await fetch(`http://localhost:7000/projects/${id}`, {\n      method: \"DELETE\",\n    });\n    setProjects(projects.filter((project) => project.id !== id));\n    for (let i = 0; i < tasks.length; i++) {\n      if (type === tasks[i].type) deleteTaskPerm(tasks[i].id);\n    }\n  };\n\n  const completeTask = async (id) => {\n    const taskToDelete = await fetchTask(id);\n    const updProject = { ...taskToDelete, completion: \"completed\" };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updProject),\n    });\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completion: data.completion } : task\n      )\n    );\n  };\n\n  //Reminder\n\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder };\n    const res = await fetch(`http://localhost:7000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: data.reminder } : task\n      )\n    );\n  };\n\n  const toggleShow = async (id) => {\n    const projectToShow = await fetchProject(id);\n    const updProject = { ...projectToShow, show: !projectToShow.show };\n    const res = await fetch(`http://localhost:7000/projects/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updProject),\n    });\n    const data = await res.json();\n\n    setProjects(\n      projects.map((project) =>\n        project.id === id ? { ...project, show: data.show } : project\n      )\n    );\n  };\n  return (\n    <Router>\n      <div className=\"container\">\n        <Header\n          onAdd={() => setShowAddTask(!showAddTask)}\n          showAdd={showAddTask}\n        />\n        <Route\n          path=\"/\"\n          exact\n          render={(props) => (\n            <>\n              {showAddTask && <AddTask onAdd={addTask} />}\n              <Tasks\n                tasks={tasks}\n                onDelete={deleteTask}\n                onToggle={toggleReminder}\n                onShow={() => setShowShortTasks(!showShortTasks)}\n                showShort={showShortTasks}\n                onComplete={completeTask}\n                type={\"short\"}\n              />\n              <Tasks\n                tasks={tasks}\n                onDelete={deleteTask}\n                onToggle={toggleReminder}\n                onShow={() => setShowLongTasks(!showLongTasks)}\n                showShort={showLongTasks}\n                onComplete={completeTask}\n                type={\"long\"}\n              />\n              <Tasks\n                tasks={tasks}\n                onDelete={deleteTask}\n                onToggle={toggleReminder}\n                onShow={() => setShowAppointments(!showAppointments)}\n                showShort={showAppointments}\n                onComplete={completeTask}\n                type={\"appointment\"}\n              />\n              <Projects\n                projects={projects}\n                tasks={tasks}\n                onDelete={deleteTask}\n                onToggle={toggleReminder}\n                onShow={toggleShow}\n                onComplete={completeTask}\n                onAdd={addTask}\n                deleteProject={deleteProject}\n              ></Projects>\n              <div style={{ textAlign: \"center\" }}>\n                <Link to=\"/completedTasks\" className=\"button\">\n                  View Completed Tasks\n                </Link>\n              </div>\n            </>\n          )}\n        />\n\n        <Route path=\"/completedTasks\">\n          <CompletedTasks\n            tasks={tasks}\n            onDelete={deleteTaskPerm}\n            showTasks={showCompletedTasks}\n            onShowTasks={() => setShowCompletedTasks(!showCompletedTasks)}\n            projects={projects}\n            showProjects={showCompletedProjects}\n            onShowProjects={() =>\n              setShowCompletedProjects(!showCompletedProjects)\n            }\n            onShowProject={toggleShow}\n            deleteProject={deleteProjectPerm}\n          />\n        </Route>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}